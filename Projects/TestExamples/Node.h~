// Node.h
#ifndef _NODE_H_
#define _NODE_H_

template<class T>
class LinkedList;
// ?????????
template<class T>
class Node{ // ????????? ????? 
private:
	Node<T> *next; // ??????????? 
public:
	T data; // ?????? 
	Node(const T&item, Node<T>*next=0);  // ?????? 
	void insertAfter(Node<T>*p); // ????????????????????p 
	Node<T>*deleteAfter(); // ??????????????????????? 
	Node<T>*nextNode(); // ??????????? 
	const Node<T>*nextNode()const; // ??????????? 
	friend LinkedList<T>;
};

template<class T>
Node<T>::Node(const T&item, Node<T>*next):data(item), next(next){}

template<class T>
void Node<T>::insertAfter(Node<T>*p){
	p->next = next;  // p???????????????????? 
	next = p; // this.next ???????????????p 
}

template<class T>
Node<T>* Node<T>::deleteAfter(){
	Node<T>*tempptr = next; // ??????????????????
	if(next == 0){  // ??????????? 
		return 0;
	}
	next = tempptr->next; // ?§Þ?????????
	return tempptr; 
}

template<class T>
Node<T>* Node<T>::nextNode(){
	return next;
} 

template<class T>
const Node<T>* Node<T>::nextNode()const{
	return next;
} 

#endif
